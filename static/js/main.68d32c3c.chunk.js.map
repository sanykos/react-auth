{"version":3,"sources":["components/Input/Input.js","axios/axios-swagger.js","store/actions/login.js","store/actions/actionTypes.js","components/Login/Login.js","components/Table/Table.js","components/TableSearch/TableSearch.js","components/UsersList/UsersList.js","components/Logout/Logout.js","components/Home/Home.js","components/Navigation/Menu.js","App.js","serviceWorker.js","store/reducers/login.js","store/reducers/rootReducer.js","index.js"],"names":["isInvalid","valid","touched","shouldValidate","Input","props","inputType","type","cls","htmlFor","Math","random","push","className","join","label","id","value","onChange","placeholder","errorMessage","axios","create","baseURL","loginSuccess","token","logout","localStorage","removeItem","Login","state","isFormValid","formControls","username","validation","required","minLength","password","handleSubmit","e","preventDefault","login","onChangeHandler","event","controlName","control","target","validateControl","Object","keys","forEach","name","setState","isValid","trim","length","this","map","index","key","onSubmit","renderInputs","disabled","Component","connect","dispatch","isLogin","a","loginData","post","response","data","setItem","onClick","onSort","bind","sort","user","first_name","last_name","useState","setvalue","onSearch","aria-label","aria-describedby","onKeyPress","UsersList","isLoading","search","sortField","clonedData","concat","_","orderBy","searchHandler","getItem","get","headers","Authorization","then","catch","error","console","log","filter","toLowerCase","includes","filteredData","getFilteredData","TableSearch","Table","Logout","to","Home","Menu","links","link","exact","isAuthenticated","Fragment","renderLinks","App","autoLogin","routes","path","component","withRouter","Boolean","window","location","hostname","match","initialState","combineReducers","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","next","result","getState","reduxThunk","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"2SAIA,SAASA,EAAT,GAAsD,IAAlCC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,eAChC,OAAQF,GAASE,GAAkBD,EAGvC,IAuBeE,EAvBD,SAAAC,GACV,IAAMC,EAAYD,EAAME,MAAQ,OAC1BC,EAAM,CAAC,cACPC,EAAO,UAAMH,EAAN,YAAmBI,KAAKC,UAIrC,OAHGX,EAAUK,IACTG,EAAII,KAAK,WAGT,yBAAKC,UAAWL,EAAIM,KAAK,MACrB,2BAAOL,QAASA,GAAUJ,EAAMU,OAChC,2BACIR,KAAMD,EACNU,GAAIP,EACJI,UAAU,eACVI,MAAOZ,EAAMY,MACbC,SAAUb,EAAMa,SAChBC,YAAad,EAAMc,cAEtBnB,EAAUK,IAAU,0BAAMQ,UAAU,IAAIR,EAAMe,cAAgB,sI,iCCxB5DC,E,OAAAA,EAAMC,OAAO,CACxBC,QAAS,mDCaN,SAASC,EAAaC,GACzB,MAAO,CACHlB,KClBoB,eDmBpBkB,SAeD,SAASC,IAEZ,OADAC,aAAaC,WAAW,SACjB,CACHrB,KCpCmB,e,ICIrBsB,E,4MAEFC,MAAQ,CACJC,aAAa,EACbC,aAAc,CACVC,SAAU,CACNhB,MAAO,GACPV,KAAM,WACNQ,MAAO,WACPI,YAAa,iBACbC,aAAc,sMACdnB,OAAO,EACPC,SAAS,EACTgC,WAAY,CACRC,UAAU,EACVC,UAAW,IAGnBC,SAAU,CACNpB,MAAO,GACPV,KAAM,WACNQ,MAAO,WACPI,YAAa,iBACbC,aAAc,+IACdnB,OAAO,EACPC,SAAS,EACTgC,WAAY,CACRC,UAAU,EACVC,UAAW,M,EAK3BE,aAAe,SAACC,GACZA,EAAEC,iBACH,EAAKnC,MAAMoC,MACN,EAAKX,MAAME,aAAaC,SAAShB,MACjC,EAAKa,MAAME,aAAaK,SAASpB,OACjC,I,EAkBRyB,gBAAkB,SAACC,EAAOC,GAEtB,IAAMZ,EAAY,eAAO,EAAKF,MAAME,cAC9Ba,EAAO,eAAOb,EAAaY,IAEjCC,EAAQ5B,MAAQ0B,EAAMG,OAAO7B,MAC7B4B,EAAQ3C,SAAU,EAClB2C,EAAQ5C,MAAQ,EAAK8C,gBAAgBF,EAAQ5B,MAAO4B,EAAQX,YAC5DF,EAAaY,GAAeC,EAE5B,IAAId,GAAc,EAClBiB,OAAOC,KAAKjB,GAAckB,SAAQ,SAAAC,GAC9BpB,EAAcC,EAAamB,GAAMlD,OAAS8B,KAG9C,EAAKqB,SAAS,CACVpB,eAAcD,iB,8DA9BNd,EAAOiB,GACnB,IAAIA,EACA,OAAO,EAEX,IAAImB,GAAU,EAOd,OANGnB,EAAWC,WACVkB,EAA2B,KAAjBpC,EAAMqC,QAAiBD,GAElCnB,EAAWE,YACViB,EAAUpC,EAAMsC,QAAUrB,EAAWE,WAAaiB,GAE/CA,I,qCAuBK,IAAD,OAkBX,OAjBeL,OAAOC,KAAKO,KAAK1B,MAAME,cAAcyB,KAAI,SAACb,EAAac,GAClE,IAAOb,EAAU,EAAKf,MAAME,aAAaY,GACzC,OACI,kBAAC,EAAD,CACIe,IAAKf,EAAcc,EACnBnD,KAAMsC,EAAQtC,KACdU,MAAO4B,EAAQ5B,MACfhB,MAAO4C,EAAQ5C,MACfC,QAAS2C,EAAQ3C,QACjBgB,SAAU,SAAAyB,GAAK,OAAI,EAAKD,gBAAgBC,EAAOC,IAC/C7B,MAAO8B,EAAQ9B,MACfI,YAAa0B,EAAQ1B,YACrBhB,iBAAkB0C,EAAQX,WAC1Bd,aAAcyB,EAAQzB,oB,+BAWlC,OAEI,6BAEI,0BAAMwC,SAAUJ,KAAKlB,cAChBkB,KAAKK,eACV,4BAAQtD,KAAK,SAASM,UAAU,kBAAkBiD,UAAWN,KAAK1B,MAAMC,aAAxE,wC,GA3GIgC,aA0HLC,kBAAQ,MANvB,SAA4BC,GACxB,MAAQ,CACJxB,MAAO,SAACR,EAAUI,EAAU6B,GAArB,OAAiCD,EFzHjC,SAAehC,EAAUI,EAAU6B,GAC9C,8CAAO,WAAMD,GAAN,mBAAAE,EAAA,6DACGC,EAAY,CACdnC,WAAUI,YAFX,SAIoBhB,EAAMgD,KAAK,mBAAoBD,GAJnD,OAIGE,EAJH,OAKG7C,EAAQ6C,EAASC,KAAK9C,MAC5BE,aAAa6C,QAAQ,QAAS/C,GAC9BwC,EAASzC,EAAaC,IAPnB,2CAAP,sDEwHqDgB,CAAMR,EAASI,QAIzD2B,CAAkCnC,G,iBC5HlC,WAAAxB,GACX,OAEI,2BAAOQ,UAAU,SACb,+BACI,4BACI,0CACA,wBAAI4D,QAASpE,EAAMqE,OAAOC,KAAK,KAAM,OAArC,KAA8C,6BAAMtE,EAAMuE,OAC1D,yCACA,0CAGR,+BAEQvE,EAAMkE,KAAKd,KAAI,SAAAoB,GAAI,OACnB,wBAAIlB,IAAKkB,EAAK7D,IACV,4BAAK6D,EAAKC,YACV,4BAAKD,EAAK7D,IACV,4BAAK6D,EAAKE,WACV,4BAAKF,EAAK5C,iB,QCnBnB,WAAA5B,GAAU,IAAD,EACM2E,mBAAS,IADf,mBACb/D,EADa,KACNgE,EADM,KAapB,OACI,yBAAKpE,UAAU,yBACX,yBAAKA,UAAU,uBACb,4BAAQA,UAAU,4BAA4BN,KAAK,SACjDkE,QAAS,kBAAMpE,EAAM6E,SAASjE,KADhC,WAGF,2BAAOV,KAAK,OAAOM,UAAU,eAAeM,YAAY,GAAGgE,aAAW,GAAGC,mBAAiB,eACtFlE,SAjBe,SAAAyB,GACvBsC,EAAStC,EAAMG,OAAO7B,QAiBdoE,WAdQ,SAAA1C,GACC,UAAdA,EAAMgB,KACLtD,EAAM6E,SAASjE,IAaXA,MAAOA,MCqDRqE,E,4MArEXxD,MAAQ,CACJyD,WAAW,EACXhB,KAAO,GACPiB,OAAQ,GACRZ,KAAM,MACNa,UAAW,M,EAoBff,OAAU,SAAAe,GACN,IAAMC,EAAa,EAAK5D,MAAMyC,KAAKoB,SAC7Bf,EAA2B,QAApB,EAAK9C,MAAM8C,KAAiB,OAAS,MAC5CL,EAAOqB,IAAEC,QAAQH,EAAYD,EAAWb,GAC9C,EAAKxB,SAAS,CACVmB,KAAMA,EACNK,KAAMA,EACNa,UAAWA,K,EAInBK,cAAgB,SAACN,GACb,EAAKpC,SAAS,CAACoC,Y,kEA7BE,IAAD,OACZ/D,EAAQE,aAAaoE,QAAQ,SACjC1E,EAAM2E,IAAI,iBAAkB,CACxBC,QAAS,CACL,eAAgB,mBAChBC,cAAc,SAAD,OAAWzE,MAE7B0E,MAAK,SAAA7B,GAAa,IACVC,EAAQD,EAARC,KACP,EAAKnB,SAAS,CACVmB,YAEL6B,OAAM,SAAAC,GACLC,QAAQC,IAAIF,Q,wCAmBD,IAAD,EACS7C,KAAK1B,MAArByC,EADO,EACPA,KAAMiB,EADC,EACDA,OACb,OAAIA,EAGGjB,EAAKiC,QAAO,SAAA3B,GACf,OAAOA,EAAI,SAAa4B,cAAcC,SAASlB,EAAOiB,kBAH/ClC,I,+BASX,IAAMoC,EAAenD,KAAKoD,kBAC1B,OACI,kBAAC,WAAD,KACI,kBAACC,EAAD,CACI3B,SAAU1B,KAAKsC,gBAEvB,kBAACgB,EAAD,CACIvC,KAAMoC,EACNjC,OAAQlB,KAAKkB,OACbE,KAAMpB,KAAK1B,MAAM8C,KACjBa,UAAWjC,KAAK1B,MAAM2D,iB,GA/Dd1B,aCFlBgD,E,kLAEEvD,KAAKnD,MAAMqB,W,+BAIX,OAAO,kBAAC,IAAD,CAAUsF,GAAI,U,GANRjD,aAgBNC,kBAAQ,MANvB,SAA4BC,GACxB,MAAO,CACHvC,OAAQ,kBAAMuC,EAASvC,SAIhBsC,CAAkC+C,GCZlCE,E,uKANP,OACI,mD,GAHOlD,a,QC6CJmD,E,0KAzCCC,GACR,OAAOA,EAAM1D,KAAI,SAAC2D,EAAM1D,GACpB,OACI,wBAAIC,IAAKD,EAAO7C,UAAU,YACtB,kBAAC,IAAD,CACImG,GAAII,EAAKJ,GACTK,MAAOD,EAAKC,MACZxG,UAAU,YAETuG,EAAKrG,a,+BAStB,IAAMoG,EAAQ,CACV,CAACH,GAAI,IAAKjG,MAAO,OAAQsG,OAAO,IAUpC,OAPG7D,KAAKnD,MAAMiH,iBACVH,EAAMvG,KAAK,CAACoG,GAAI,SAAUjG,MAAO,QAASsG,OAAO,IACjDF,EAAMvG,KAAK,CAACoG,GAAI,UAAWjG,MAAO,SAAUsG,OAAO,KAEnDF,EAAMvG,KAAK,CAACoG,GAAI,SAAUjG,MAAO,QAASsG,OAAO,IAIjD,kBAAC,IAAME,SAAP,KACI,yBAAK1G,UAAU,iDACX,wBAAIA,UAAU,cACT2C,KAAKgE,YAAYL,U,GAnCvBpD,aCOb0D,E,kLAGFjE,KAAKnD,MAAMqH,c,+BAKX,IAAIC,EACF,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,SAASC,UAAWhG,EAAOwF,OAAO,IAC9C,kBAAC,IAAD,CAAOO,KAAK,IAAIC,UAAWZ,EAAMI,OAAO,IACxC,kBAAC,IAAD,CAAUL,GAAG,OAejB,OAXGxD,KAAKnD,MAAMiH,kBACVK,EACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWZ,EAAMI,OAAO,IACxC,kBAAC,IAAD,CAAOO,KAAK,SAASC,UAAWvC,EAAW+B,OAAO,IAClD,kBAAC,IAAD,CAAOO,KAAK,UAAUC,UAAWd,EAAQM,OAAO,IAChD,kBAAC,IAAD,CAAUL,GAAG,QAMnB,yBAAKnG,UAAU,aACX,kBAAC,EAAD,CAAMyG,gBAAiB9D,KAAKnD,MAAMiH,kBAChCK,O,GA9BM5D,aAmDH+D,kBAAW9D,aAb1B,SAAyBlC,GAEvB,MAAO,CACLwF,kBAAmBxF,EAAMW,MAAMhB,UAInC,SAA4BwC,GAC1B,MAAO,CACLyD,UAAW,kBAAMzD,GTlCV,SAAAA,GACH,IAAMxC,EAAQE,aAAaoE,QAAQ,SAI/B9B,EAHAxC,EAGSD,EAAaC,GAFbC,YSmCKsC,CAA6CyD,I,MClDnDM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oBChBAC,EAAe,CACjB3G,MAAO,ICAI4G,kBAAgB,CAC3B5F,MDEW,WAAqD,IAA/BX,EAA8B,uDAAtBsG,EAAcE,EAAQ,uCAC/D,OAAOA,EAAO/H,MACV,IVRoB,eUShB,OAAO,2BACAuB,GADP,IACcL,MAAO6G,EAAO7G,QAGhC,IVZmB,cUaf,OAAO,2BACAK,GADP,IACcL,MAAO,OAGzB,QACI,OAAOK,MENbyG,EACc,kBAAXP,QACPA,OAAOQ,qCACLR,OAAOQ,qCAAqC,IAEvCC,IAcT,IAAMC,EAAQC,YAAYC,EAAaL,EAAiBM,aAZxD,SAA0BH,GACxB,OAAO,SAASI,GACd,OAAO,SAASR,GACd,IAAMS,EAASD,EAAKR,GAEpB,OADAhC,QAAQC,IAAI,aAAcmC,EAAMM,YACzBD,MASXE,OAEIC,EACJ,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUR,MAAOA,GACf,kBAAC,EAAD,QAKNS,IAASC,OAAOF,EACdG,SAASC,eAAe,SHsFpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtD,MAAK,SAAAuD,GACJA,EAAaC,gBAEdvD,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMuD,c","file":"static/js/main.68d32c3c.chunk.js","sourcesContent":["import React from 'react'\r\nimport './input.css'\r\n\r\n\r\nfunction isInvalid({valid, touched, shouldValidate}) {\r\n    return !valid && shouldValidate && touched\r\n}\r\n\r\nconst Input = props => {\r\n    const inputType = props.type || 'text'\r\n    const cls = ['form-group']\r\n    const htmlFor = `${inputType}-${Math.random()}`\r\n    if(isInvalid(props)) {\r\n        cls.push('invalid')\r\n    }\r\n    return (\r\n        <div className={cls.join(' ')}>\r\n            <label htmlFor={htmlFor}>{props.label}</label>\r\n            <input \r\n                type={inputType}\r\n                id={htmlFor} \r\n                className=\"form-control\" \r\n                value={props.value}\r\n                onChange={props.onChange}\r\n                placeholder={props.placeholder}\r\n                />\r\n            {isInvalid(props) && <span className=\"\">{props.errorMessage || 'Введите верное значение'}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Input","import axios from 'axios'\r\n\r\nexport default axios.create({\r\n    baseURL: 'http://emphasoft-test-assignment.herokuapp.com'\r\n})","import axios from '../../axios/axios-swagger'\r\nimport { AUTH_SUCCESS, AUTH_LOGOUT } from './actionTypes';\r\nexport default function login(username, password, isLogin) {\r\n    return async dispatch => {\r\n        const loginData = {\r\n            username, password\r\n        }\r\n        const response = await axios.post('/api-token-auth/', loginData)\r\n        const token = response.data.token;\r\n        localStorage.setItem('Token', token)\r\n        dispatch(loginSuccess(token))\r\n        //console.log(response.data.token)\r\n    }\r\n}\r\n\r\n\r\nexport function loginSuccess(token) {\r\n    return {\r\n        type: AUTH_SUCCESS,\r\n        token\r\n    }\r\n}\r\n\r\nexport function autoLogin() {\r\n    return dispatch => {\r\n        const token = localStorage.getItem('Token')\r\n        if(!token) {\r\n            dispatch(logout())\r\n        }else {\r\n            dispatch(loginSuccess(token))\r\n        }\r\n    }\r\n}\r\n\r\nexport function logout() {\r\n    localStorage.removeItem('Token')\r\n    return {\r\n        type: AUTH_LOGOUT\r\n    }\r\n}","export const AUTH_SUCCESS = 'AUTH_SUCCESS'\r\nexport const AUTH_LOGOUT = 'AUTH_LOGOUT'","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport Input from '../Input/Input'\r\nimport login from '../../store/actions/login'\r\n\r\nclass Login extends Component {\r\n\r\n    state = {\r\n        isFormValid: false,\r\n        formControls: {\r\n            username: {\r\n                value: '',\r\n                type: 'username',\r\n                label: 'username',\r\n                placeholder: 'Enter username',\r\n                errorMessage: 'Введети корректное имя пользователя',\r\n                valid: false,\r\n                touched: false,\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 1\r\n                }\r\n            },\r\n            password: {\r\n                value: '',\r\n                type: 'password',\r\n                label: 'password',\r\n                placeholder: 'Enter password',\r\n                errorMessage: 'Введите корректный пароль',\r\n                valid: false,\r\n                touched: false,\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 1\r\n                }\r\n            }\r\n        }\r\n    }\r\n    handleSubmit = (e) => {\r\n        e.preventDefault()\r\n       this.props.login(\r\n            this.state.formControls.username.value,\r\n            this.state.formControls.password.value,\r\n            true\r\n       )\r\n    }\r\n\r\n    validateControl(value, validation) {\r\n        if(!validation) {\r\n            return true\r\n        }\r\n        let isValid = true\r\n        if(validation.required) {\r\n            isValid = value.trim() !== '' && isValid\r\n        }\r\n        if(validation.minLength) {\r\n            isValid = value.length >= validation.minLength && isValid\r\n        }\r\n        return isValid\r\n    }\r\n\r\n    onChangeHandler = (event, controlName) => {\r\n       // console.log(`${controlName}: `, event.target.value)\r\n        const formControls = {...this.state.formControls}\r\n        const control = {...formControls[controlName]}\r\n        \r\n        control.value = event.target.value\r\n        control.touched = true\r\n        control.valid = this.validateControl(control.value, control.validation)\r\n        formControls[controlName] = control\r\n\r\n        let isFormValid = true\r\n        Object.keys(formControls).forEach(name => {\r\n            isFormValid = formControls[name].valid && isFormValid\r\n        })\r\n\r\n        this.setState({\r\n            formControls, isFormValid\r\n        })\r\n    }\r\n\r\n    renderInputs() {\r\n        const inputs = Object.keys(this.state.formControls).map((controlName, index) => {\r\n            const  control = this.state.formControls[controlName]\r\n            return (\r\n                <Input\r\n                    key={controlName + index}\r\n                    type={control.type}\r\n                    value={control.value}\r\n                    valid={control.valid}\r\n                    touched={control.touched}\r\n                    onChange={event => this.onChangeHandler(event, controlName)}\r\n                    label={control.label}\r\n                    placeholder={control.placeholder}\r\n                    shouldValidate={!!control.validation}\r\n                    errorMessage={control.errorMessage}\r\n                />\r\n            )\r\n        })\r\n        return inputs\r\n    }\r\n\r\n\r\n    render() {\r\n        //console.log(this.state)\r\n       // const { username, password, errorMessage} = this.state\r\n        return(\r\n            \r\n            <div>\r\n                {/* {errorMessage && <strong>{errorMessage}</strong>} */}\r\n                <form onSubmit={this.handleSubmit}>\r\n                    {this.renderInputs()}\r\n                <button type=\"submit\" className=\"btn btn-primary\" disabled={!this.state.isFormValid}>Войти</button>\r\n            </form>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return  {\r\n        login: (username, password, isLogin) => dispatch(login(username,password,isLogin) )\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(Login)","import React from 'react'\r\n\r\n\r\nexport default props => {\r\n    return (\r\n      \r\n        <table className=\"table\">\r\n            <thead>\r\n                <tr>\r\n                    <th>first_name</th>\r\n                    <th onClick={props.onSort.bind(null, 'id')}>id<sup>{props.sort}</sup></th>\r\n                    <th>last_name</th>\r\n                    <th>username</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {\r\n                    props.data.map(user => (\r\n                    <tr key={user.id}>\r\n                        <td>{user.first_name}</td>\r\n                        <td>{user.id}</td>\r\n                        <td>{user.last_name}</td>\r\n                        <td>{user.username}</td>\r\n                    </tr>\r\n                    ))\r\n                }\r\n            </tbody>  \r\n        </table>\r\n\r\n    )\r\n}","import React, {useState} from 'react'\r\n\r\n\r\nexport default props => {\r\n    const [value, setvalue] = useState('')\r\n\r\n    const valueChangeHandler = event => {\r\n        setvalue(event.target.value)\r\n    }\r\n\r\n    const handleEnter = event => {\r\n        if(event.key === 'Enter') {\r\n            props.onSearch(value)\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className=\"input-group mb-3 mt-3\">\r\n            <div className=\"input-group-prepend\">\r\n              <button className=\"btn btn-outline-secondary\" type=\"button\"\r\n                onClick={() => props.onSearch(value)}>Button</button>\r\n            </div>\r\n            <input type=\"text\" className=\"form-control\" placeholder=\"\" aria-label=\"\" aria-describedby=\"basic-addon1\"\r\n                onChange={valueChangeHandler}\r\n                onKeyPress={handleEnter}\r\n                value={value}\r\n             />\r\n        </div>\r\n    )\r\n}","import React, {Component, Fragment} from 'react'\r\nimport axios from '../../axios/axios-swagger'\r\nimport _ from 'lodash'\r\nimport Table from '../Table/Table'\r\nimport TableSearch from '../TableSearch/TableSearch'\r\n\r\n\r\n\r\nclass UsersList extends Component {\r\n    state = {\r\n        isLoading: false,\r\n        data : [],\r\n        search: '',\r\n        sort: 'asc',\r\n        sortField: 'id'\r\n    }\r\n\r\n    componentDidMount() {\r\n        let token = localStorage.getItem('Token');\r\n        axios.get('/api/v1/users/', {\r\n            headers: {\r\n                'Content-Type': \"application/json\",\r\n                Authorization: `Token ${token}`\r\n            }\r\n        }).then(response => {\r\n            const {data} = response\r\n            this.setState({\r\n                data\r\n            })\r\n        }).catch(error => {\r\n            console.log(error)\r\n        })\r\n    }\r\n    \r\n    onSort  = sortField =>  {\r\n        const clonedData = this.state.data.concat()\r\n        const sort = this.state.sort === 'asc' ? 'desc' : 'asc'\r\n        const data = _.orderBy(clonedData, sortField, sort)\r\n        this.setState({\r\n            data: data,\r\n            sort: sort,\r\n            sortField: sortField\r\n        })\r\n    }\r\n    \r\n    searchHandler = (search) => {\r\n        this.setState({search})\r\n    }\r\n    \r\n    getFilteredData() {\r\n        const {data, search} = this.state\r\n        if(!search) {\r\n            return data\r\n        }\r\n        return data.filter(user => {\r\n            return user['username'].toLowerCase().includes(search.toLowerCase())\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        const filteredData = this.getFilteredData()\r\n        return (\r\n            <Fragment>\r\n                <TableSearch \r\n                    onSearch={this.searchHandler}\r\n                />\r\n            <Table \r\n                data={filteredData}\r\n                onSort={this.onSort}\r\n                sort={this.state.sort}\r\n                sortField={this.state.sortField}\r\n                />\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UsersList","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {Redirect} from 'react-router-dom'\r\nimport { logout } from '../../store/actions/login'\r\n\r\n\r\nclass Logout extends Component {\r\n    componentDidMount() {\r\n        this.props.logout()\r\n    }\r\n\r\n    render() {\r\n        return <Redirect to={'/'} />\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        logout: () => dispatch(logout())\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(Logout)","import React, {Component} from 'react'\r\n\r\nclass Home extends Component {\r\n    render() {\r\n        return (\r\n            <h1>React auth test</h1>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home","import React, {Component} from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\n\r\nclass Menu extends Component {\r\n\r\n    renderLinks(links) {\r\n        return links.map((link, index) => {\r\n            return(\r\n                <li key={index} className=\"nav-item\">\r\n                    <NavLink\r\n                        to={link.to}\r\n                        exact={link.exact}\r\n                        className=\"nav-link\"\r\n                    >\r\n                        {link.label}\r\n                    </NavLink>\r\n                </li>\r\n            )\r\n        })\r\n    } \r\n\r\n    render() {\r\n\r\n        const links = [\r\n            {to: '/', label: 'Home', exact: true}\r\n        ]\r\n\r\n        if(this.props.isAuthenticated) {\r\n            links.push({to: '/users', label: 'Users', exact: false})\r\n            links.push({to: '/logout', label: 'Logout', exact: false})\r\n        }else {\r\n            links.push({to: '/login', label: 'Login', exact: false})\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n                    <ul className=\"navbar-nav\">\r\n                        {this.renderLinks(links)}\r\n                    </ul>\r\n                </nav>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Menu","import React, {Component} from 'react';\r\nimport {Route, Switch, Redirect, withRouter} from 'react-router-dom'\r\nimport {connect} from 'react-redux'\r\nimport Login from './components/Login/Login'\r\nimport UsersList from './components/UsersList/UsersList'\r\nimport Logout from './components/Logout/Logout';\r\nimport Home from './components/Home/Home';\r\nimport Menu from './components/Navigation/Menu'\r\nimport { autoLogin } from './store/actions/login';\r\n\r\n\r\nclass App extends Component {\r\n\r\n  componentDidMount() {\r\n    this.props.autoLogin()\r\n  }\r\n\r\n  render() {\r\n\r\n    let routes = (\r\n      <Switch>\r\n        <Route path=\"/login\" component={Login} exact={false}/>\r\n        <Route path=\"/\" component={Home} exact={true}/>\r\n        <Redirect to=\"/\" />\r\n      </Switch>\r\n    )\r\n\r\n    if(this.props.isAuthenticated) {\r\n        routes = (\r\n          <Switch>\r\n            <Route path=\"/\" component={Home} exact={true}/>\r\n            <Route path=\"/users\" component={UsersList} exact={false}/>\r\n            <Route path=\"/logout\" component={Logout} exact={false}/>\r\n            <Redirect to=\"/\" />\r\n          </Switch>\r\n        )\r\n    }\r\n\r\n    return(\r\n      <div className=\"container\">\r\n          <Menu isAuthenticated={this.props.isAuthenticated}/>\r\n           {routes}\r\n         \r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n //console.log(state.login.token)\r\n  return {\r\n    isAuthenticated: !!state.login.token\r\n  }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    autoLogin: () => dispatch(autoLogin())\r\n  }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(App))\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { AUTH_SUCCESS, AUTH_LOGOUT } from \"../actions/actionTypes\"\r\n\r\nconst initialState = {\r\n    token: ''\r\n}\r\n\r\nexport default function loginReducer(state = initialState, action) {\r\n    switch(action.type) {\r\n        case AUTH_SUCCESS: {\r\n            return {\r\n                ...state, token: action.token\r\n            }\r\n        }\r\n        case AUTH_LOGOUT: {\r\n            return {\r\n                ...state, token: null\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}","import {combineReducers} from 'redux'\r\nimport loginReducer from './login'\r\n\r\nexport default combineReducers({\r\n    login: loginReducer\r\n})","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {BrowserRouter} from 'react-router-dom'\r\nimport {createStore, applyMiddleware, compose} from 'redux'\r\nimport reduxThunk from 'redux-thunk'\r\nimport {Provider} from 'react-redux'\r\nimport rootReducer from './store/reducers/rootReducer'\r\n\r\n\r\nconst composeEnhancers =\r\n  typeof window === 'object' &&\r\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?   \r\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\r\n      // Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\r\n    }) : compose;\r\n\r\nfunction loggerMiddleware(store) {\r\n  return function(next) {\r\n    return function(action) {\r\n      const result = next(action)\r\n      console.log('Middleware', store.getState());\r\n      return result\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(\r\n  loggerMiddleware,\r\n  reduxThunk)))\r\n\r\nconst app = (\r\n  <BrowserRouter>\r\n    <Provider store={store}>\r\n      <App/>\r\n    </Provider>\r\n  </BrowserRouter>\r\n)\r\n\r\nReactDOM.render(app,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}